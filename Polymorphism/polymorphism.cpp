/*
Полиморфизм

Это способность объектов вести себя по разному, в зависимости от обстоятельств.
Это реализуется перегрузкой функций, методов, операторов.
Такой полиморфизм отрабатывает на этапе компиляции (Compile-time polymorphism), при этом, передаваемые параметры являются обстоятельствами, при которых вызываются функции.

Особое место в ООП занимает полиморфизм подтипов (Inclusion polymorphism), который отрабатывает на этапе выполнения. 
Это способность объектов вести себя по разному, в зависимости от того, кем они являются.

Полиморфизм подтипов реализуется:

1) При помощи указателей на базовый класс (base-class pointers). 
Дело в том, что указатель может хранить адрес дочернего объекта. Это позволяет выполнять обобщение (Generalisation). Собирать в одном месте разнотипные объекты, если у них один родитель.
В этом случае преобразование дочернего объекта в базовый тип называется Upcast

2) При помощи виртуальных методов (virtual functions)
Виртуальным называется метод, который может быть переопределен в дочернем классе.
Дело в том, что базовый класс не знает, сколько и каких классов от него унаследовано, и тем более не знает, из каких полей они состоят.

Виртуальные функции это единственная возможность заглянуть из базового класса в дочерний.
Виртуальный метод, вызваннный для базового класса, автоматически вызывает такой же метод для дочернего объекта. Это возможно благодаря _vfptr (Virtual Functions Pointers) - таблица указателей на виртуальные функции.
Это поле неявно создается в классе, если хотя бы один метод этого класса сделать виртуальным.

-------------------------------------------------------------------------------------
Полиморфизм подтипов возможен только при наследовании.
-------------------------------------------------------------------------------------

Если функция объявлена в базовом классе, как виртуальная, то во всех дочерних классах, она должна быть объявлена с модификатором override
*/